---
- name: check the loop 
  debug:
    msg: "{{ item.value.name }}"
  loop: "{{ q('dict',osp_servers) }}"

- name: Create server instances
  os_server:
    cloud:            "{{ openstack_cloud                           | default('openstack') }}"
    name:             "{{ __openstack_server.value.name }}"
    state:            "{{ __openstack_server.value.state }}"
    image:            "{{ __openstack_server.value.image            | default('rhel-7.6') }}"
    flavor:           "{{ __openstack_server.value.flavor           | default('m2.medium') }}"
    key_name:         "{{ __openstack_server.value.key_name         | default('ansible_ssh_key') }}"
    wait:             "{{ __openstack_server.value                  | default('yes') }}"
    security_groups:  "{{ __openstack_server.value.security_group }}"
    delete_fip:       "{{__openstack_server.value.delete_fip        | default(true) }}"
    meta: "{{ __openstack_server.value.meta }}"
    nics:
      - net-name: int_network
      #    - net-name: ext_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      curl -o /etc/yum.repos.d/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
  loop: "{{ q('dict',osp_servers) }}"
  loop_control:
    loop_var: __openstack_server
  async: 900
  poll: 0
  register: r_instances

#- name: Wait for async OSP instance creation to complete
#  async_status: "jid={{ item.ansible_job_id }}"
#  register: r_wait
#  until: r_wait.finished
#  retries: 900
#  loop: "{{ r_instances.results }}"
#
#- name: Debug instances 
#  debug:
#    msg: "Server is {{ __instance.__openstack_server.instance_name }}"
#    verbosity: 2
#  loop: "{{ r_instances.results }}"
#  loop_control:
#    loop_var: __instance
#
#- when: openstack_server_state != 'absent' | default(true)
#  block:
#
#    - name: Add floating IP to instances
#      os_floating_ip:
#        cloud: openstack
#        state: "{{ openstack_server_state | default('present') }}"
#        reuse: yes
#        server: "{{ __instance.__openstack_server.name }}"
#        network: ext_network
#        wait: true
#        timeout: 180
#      loop: "{{ r_instances.results }}"
#      loop_control:
#        loop_var: __instance
#      register: r_floating_ips
#
#    - name: Wait for servers by name to be available
#      wait_for:
#        host: "{{ __fip.floating_ip.floating_ip_address }}"
#        port: 22
#        search_regex: OpenSSH
#        timeout: 600
#      loop: "{{ r_floating_ips.results }}"
#      loop_control:
#        loop_var: __fip
#      delegate_to: "{{ inventory_hostname }}"
#
#...
